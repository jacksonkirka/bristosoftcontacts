#!/usr/bin/python2
'''
main.py is the controller for bristoSOFT Contacts v. 0.1 in the
Model/View Controller context.  The model is a Postresql database and the view
consist of interfaces generated by Qt Designer.
'''

# Imports
import sip # Needed for conversion to Python types
sip.setapi('QString', 2)
import sys
from datetime import date
from bristo_exceptions import *
import platform
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.uic import *
import psycopg2

# Version assignment
__version__ = '0.1'

# Dynamic gui interface loading during development
contactsdialog = loadUiType('contacts.ui')[0]
# contactsdialog = loadUiType('contacts_combo.ui')[0]
bristocontacts = loadUiType('contacts_main.ui')[0]
bristologin = loadUiType('login.ui')[0]
bristosearch = loadUiType('search.ui')[0]

class bristoContactsLogin(QDialog,  bristologin):
    '''
    bristoContactsLogin is the login dialog used to login
    to a PostgreSQL database.  It captures the test needed
    to build the PostgreSQL connection string.
    '''
    def __init__(self,  parent=None):
        '''
        This initialization class method initializes
        QDialog and bristoContactsLogin.
        '''
        super(bristoContactsLogin,  self).__init__(parent)
        self.setupUi(self)

class bristoContactsDialog(QDialog,  contactsdialog):
    '''
    bristoContactsDialog provides a GUI interface for building
    the database INSERT query. 
    '''
    def __init__(self,  parent=None):
        '''
        This initialization class method initializes
        QDialog and bristoContactsDialog.
        '''
        super(bristoContactsDialog,  self).__init__(parent)
        self.setupUi(self)

class bristoContactsSearchDialog(QDialog,  bristosearch):
    '''
    bristoContactsSearchDialog is the a dialog for traversing
    the contacts database.
    '''
    def __init__(self,  parent=None):
        ''' 
        This initialization class method initializes
        QDialog and bristoContactsSearchDialog.
        '''
        super(bristoContactsSearchDialog,  self).__init__(parent)
        self.setupUi(self)
        


class bristosoftContacts(QMainWindow,  bristocontacts):
    '''
    bristosoftContacts is the Main Application window with
    all the menus, toolbars, statusbar and more.
    '''

    def __init__(self, parent=None):
        '''
        This initialization class method initializes
        QMainWindow and bristoContacts.
        '''
        super(bristosoftContacts, self).__init__(parent)
        self.setupUi(self)
        
        # Database constants cursor list return
        self._CONTACT = 0
        self._FIRSTCONTACT = 0
        self._COMPANY = 1
        self._MRMRS = 2
        self._FNAME = 3
        self._MIDDLE = 4
        self._LNAME = 5
        self._CRED = 6
        self._ADDR = 7
        self._SUITE = 8
        self._CITY = 9
        self._ST = 10
        self._POSTAL = 11
        self._OPHONE = 12
        self._CELL = 13
        self._HPHONE = 14
        self._OEMAIL = 15
        self._PEMAIL = 16
        self._OWEB = 17
        self._PWEB = 18
        self._NOTES = 19
        self._PIC = 20
        
        # Image
        self._image = QPixmap()
        self._image_bin = None
        self._image_bytea = None
        self._image_buffer = None
        
        #Date and Time
        self._DATE = date.today()
        self._TODAY = self._DATE.strftime("%A %d, %B %Y")
        
        # Next/Prev
        self._NEXT = 0
        self._PREV = 0
        self._LASTCONTACT = 0
        
        
        # Set connected to false
        self.disconnected = False
        self.connected = False
        
        # Signals
        self.connect(self.actionConnect, SIGNAL('triggered'),  self.db_connect)
        self.connect(self.actionAbout_Qt, SIGNAL('triggered()'), self.aboutqt)
        self.connect(self.actionAbout_bristoSOFT_Contacts, SIGNAL('triggered()'),
                     self.aboutbristocontacts)
        self.connect(self.actionConnect, SIGNAL('triggered()'),  self.db_connect)
        self.connect(self.actionNew, SIGNAL('triggered()'),  self.db_contact_new)
        self.connect(self.actionVacuum,  SIGNAL('triggered()'),  self.db_full_vacuum)
        self.connect(self.actionReIndex,  SIGNAL('triggered()'),  self.db_reindex)
        self.connect(self.actionDisconnect,  SIGNAL('triggered()'), self.db_close)
        self.connect(self.actionQuery,  SIGNAL('triggered()'),  self.db_contacts_fetch)
        self.connect(self.actionQuit,  SIGNAL('triggered()'),  self.close_contacts)
        
        
        # set contactsStatusBar to red
        self.contactsStatusBar.setStyleSheet("background-color: \
                                              rgb(230, 128, 128);")
    
        # Settings
        settings = QSettings()
        size = settings.value("MainWindow/Size",
                              QVariant(QSize(630, 774))).toSize()
        self.resize(size)
        position = settings.value("MainWindow/Position",
                                  QVariant(QPoint(320, 140))).toPoint()
        self.move(position)
        self.restoreState(settings.value("MainWindow/State").toByteArray())

        # Set Main Window Icon
        self.setWindowIcon(QIcon(":icons/family.ico"))
    
    # About class methods
    def aboutqt(self):
        '''
        aboutqt is the standard About Qt dialog built in to QT.
        '''
        mesg = QMessageBox()
        mesg.aboutQt(self,  'About Qt')
    
    def aboutbristocontacts(self):
        '''
        aboutbristocontacts QMessageBox displays information about
        bristoSOFT Contacts v. 0.1.
        '''
        QMessageBox.about(self, "About bristoSOFT Contacts v. 0.1",
        """ <img src='bristo_logo.png' /><br />
        <b>About bristoSOFT Contacts</b> v %s
        <p>Copyright &copy; 2016 bristoSOFT 
        All rights reserved.
        <p>This is a PostgreSQL database contacts management system.  It is
        based on the PyQt frontend GUI.
        <p>Python %s - Qt %s - PyQt %s on %s""" % (
        __version__, platform.python_version(),
        QT_VERSION_STR, PYQT_VERSION_STR, platform.system()))
    
    # class Database Methods
    def db_connect(self):
        '''
        db_connect displays the login dialog and catches the signal accept()
        from the OK button then calls self.db_login.
        '''
        self.login = bristoContactsLogin()
        self.login.show()
        self.connect(self.login, SIGNAL('accepted()'),  self.db_login)

    def db_login(self):
        ''' 
        db_login establishes a connection to a PostgreSQL database on port 
        5423 with the standard connection string.
        '''
        if self.login.userNameLineEdit.text() and self.login.hostLineEdit.text() \
                and self.login.databaseLineEdit.text() and \
                self.login.passwordLineEdit.text():
                
            con = "host='"+ self.login.hostLineEdit.text() + "' dbname='" +\
                    self.login.databaseLineEdit.text() + "' user='" +\
                    self.login.userNameLineEdit.text() + "' password='" +\
                    self.login.passwordLineEdit.text() + "'"
            self.conn = psycopg2.connect(con)
            self.connected = True

            if self.disconnected:
                self.contactsStatusBar.removeWidget(self.conn_msg)
            self._date = date.today()
            self.conn_msg = QLabel(self._TODAY + ' | Connected to host: '+ 
                                    self.login.userNameLineEdit.text() +"@"+
                                    self.login.hostLineEdit.text()+
                                  '/'+ self.login.databaseLineEdit.text()+'.')
            self.contactsStatusBar.setStyleSheet("background-color: \
                                                 rgb(179, 255, 188);")
            
            self.contactsStatusBar.addWidget(self.conn_msg)
            

    def db_contact_new(self):
        '''
        db_record_new displays the new contact dialog and catches the signal accept()
        from the OK button then runs self.db_insert.
        '''
        # set contactsDialog in cetralWidget
        self.bristo = bristoContactsDialog()
        self.active_dlg = 'insert'
        self.setCentralWidget(self.bristo)
        self.cursor = self.conn.cursor()
        self.connect(self.bristo.picPushButton,  SIGNAL('clicked()'),  self.update_pic)
        self.connect(self.bristo,  SIGNAL('accepted()'), self.db_insert)
    
    
    def db_insert(self):
        '''
        db_insert inserts one new contact into the PostgreSQL database table with
        bytea picture.
        '''
        _company = self.bristo.companyLineEdit.text()
        _mrmrs = self.bristo.mrmrsLineEdit.text()
        _fname = self.bristo.firstNameLineEdit.text()
        _middle = self.bristo.middleNameLineEdit.text()
        _lname = self.bristo.lastNameLineEdit.text()
        _cred = self.bristo.credLineEdit.text()
        _addr = self.bristo.addressLineEdit.text()
        _suite = self.bristo.suiteLineEdit.text()
        _city = self.bristo.cityLineEdit.text()
        _st = self.bristo.stateLineEdit.text()
        _postal = self.bristo.postalLineEdit.text()
        _oph = self.bristo.officePhoneLineEdit.text()
        _cell = self.bristo.cellPhoneLineEdit.text()
        _hph = self.bristo.homePhoneLineEdit.text()
        _oemail = self.bristo.officeEmailLineEdit.text()
        _pemail = self.bristo.personalEmailLineEdit.text()
        _oweb = self.bristo.officeWebLineEdit.text()
        _pweb = self.bristo.personalWebLineEdit.text()
        _notes = self.bristo.notesTextEdit.toPlainText()
        
        self.cursor.execute("""INSERT INTO bristo_contacts_ct
                (bristo_contacts_ct_co, bristo_contacts_ct_title,
                bristo_contacts_ct_fname, bristo_contacts_ct_middle,
                bristo_contacts_ct_lname, bristo_contacts_ct_cred,
                bristo_contacts_ct_addr1, bristo_contacts_ct_addr2,
                bristo_contacts_ct_city, bristo_contacts_ct_state,
                bristo_contacts_ct_postal, bristo_contacts_ct_ph_office,
                bristo_contacts_ct_ph_cell, bristo_contacts_ct_home,
                bristo_contacts_ct_email1, bristo_contacts_ct_email2,
                bristo_contacts_ct_web, bristo_contacts_ct_web2,
                bristo_contacts_ct_notes, bristo_contacts_ct_picture)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,
                %s,%s,%s,%s);""", (_company,_mrmrs,_fname,_middle,_lname,
                _cred, _addr, _suite,_city,_st,_postal,_oph,_cell,_hph,
                _oemail,_pemail,_oweb,_pweb,
                _notes,psycopg2.Binary(self._image_bin)))
        self.conn.commit()
        self.contactsStatusBar.showMessage('New Contact Inserted.', 3000)
    
    def db_contacts_fetch(self):
        '''
        db_record_fetch fetches all contacts at one time.
        self.fetch_result[0][1] is First contact, company name
        self.fetch_result is a python list returned by psycopg2 driver
        The list is then traversed in memory on the list python object.
        '''
        self.bristo_search = bristoContactsSearchDialog()
        self.active_dlg = 'search'
        self.setCentralWidget(self.bristo_search)
        
        if self.connected:
            self.cursor = self.conn.cursor()
            _query = "SELECT * FROM bristo_contacts_ct ORDER by \
                bristo_contacts_ct_co, bristo_contacts_ct_lname"
            self.cursor.execute(_query)
            self.update_fetch_results()
            _msg = 'All contacts fetched from database.  Click '+ \
                    'red x to clear memory.'
            self.contactsStatusBar.showMessage(_msg, 7000)
            
    def update_fetch_results(self):
        '''
        update_fetch_results reassigns the entire contact list during an
        update.
        '''
        self.fetch_results = self.cursor.fetchall()
        self._LASTCONTACT = len(self.fetch_results) - 1
        self.bristo_search_dlg = False
        self.bristo_search.previousContactPushButton.setAutoRepeat(True)
        self.bristo_search.nextContactPushButton.setAutoRepeat(True)
        self.connect(self.bristo_search.firstContactPushButton,
                 SIGNAL('clicked()'), self.db_contact_fetch_first)
        self.connect(self.bristo_search.previousContactPushButton,
                 SIGNAL('pressed()'), self.db_contact_prev)
        self.connect(self.bristo_search.nextContactPushButton,
                 SIGNAL('pressed()'), self.db_contact_next)
        self.connect(self.bristo_search.lastContactPushButton,
                 SIGNAL('clicked()'), self.db_contact_fetch_last)
        self.connect(self.bristo_search.searchContactPushButton, 
                 SIGNAL('clicked()'),  self.db_fetch_contact)
        self.connect(self.bristo_search.updateContactPushButton, 
                 SIGNAL('clicked()'),  self.db_update_contact)
        self.connect(self.bristo_search.picPushButton,
                     SIGNAL('clicked()'),  self.update_pic)
        
    def db_contact_fetch_first(self):
        '''
        db_contact_fetch_first fetches the first contact in the bristo_contacts_ct table.'
        '''
        self._CONTACT = self._FIRSTCONTACT
        self.display_contact()
    
    def db_contact_fetch_last(self):
        '''
        db_contact_fetch_first fetches the first contact in the bristo_contacts_ct table.'
        '''
        self._CONTACT = self._LASTCONTACT
        self.display_contact()


    def db_contact_prev(self):
        '''
        db_contact_prev fetches the previous contact before the current contact base on
        index in the python list self.fetch_results.
        '''
        if not self._CONTACT <= self._FIRSTCONTACT:
            self._CONTACT -= 1
            self.display_contact()

    def db_contact_next(self):
        '''
        db_contact_next fetches the next contact after the current contact based on
        index in the python list self.fetch_results.
        '''
        if not self._CONTACT >= self._LASTCONTACT:
            self._CONTACT += 1
            self.display_contact()
            
    def db_fetch_contact(self):
        '''
        db_fetch_contact fetches the first occurence of the company name
        entered in the company search field.  The database is already
        sorted by Company and then by Last name of contact.
        '''
        for _company_idx in range(self._LASTCONTACT):
            if self.fetch_results[_company_idx][self._COMPANY].find(
                self.bristo_search.companyLineEdit.text()) > -1:
                self._CONTACT = _company_idx
                self.display_contact()
                return
        
        _msg = 'Pattern ' +"'"+self.bristo_search.companyLineEdit.text() + \
                       "'"+' not found.'
        self.contactsStatusBar.showMessage(_msg, 3000)
    
    def db_update_contact(self):
        '''
        db_update_contact updates the currently displayed contact in the
        the database.
        '''
        if self.connected:
            
            _company = self.bristo_search.companyLineEdit.text()
            _mrmrs = self.bristo_search.mrmrsLineEdit.text()
            _fname = self.bristo_search.firstNameLineEdit.text()
            _middle = self.bristo_search.middleNameLineEdit.text()
            _lname = self.bristo_search.lastNameLineEdit.text()
            _cred = self.bristo_search.credLineEdit.text()
            _addr = self.bristo_search.addressLineEdit.text()
            _suite = self.bristo_search.suiteLineEdit.text()
            _city = self.bristo_search.cityLineEdit.text()
            _st = self.bristo_search.stateLineEdit.text()
            _postal = self.bristo_search.postalLineEdit.text()
            _oph = self.bristo_search.officePhoneLineEdit.text()
            _cell = self.bristo_search.cellPhoneLineEdit.text()
            _hph = self.bristo_search.homePhoneLineEdit.text()
            _oemail = self.bristo_search.officeEmailLineEdit.text()
            _pemail = self.bristo_search.personalEmailLineEdit.text()
            _oweb = self.bristo_search.officeWebLineEdit.text()
            _pweb = self.bristo_search.personalWebLineEdit.text()
            _notes = self.bristo_search.notesTextEdit.toPlainText()
            
            self.cursor.execute("""UPDATE bristo_contacts_ct SET
                (bristo_contacts_ct_co, bristo_contacts_ct_title,
                bristo_contacts_ct_fname, bristo_contacts_ct_middle,
                bristo_contacts_ct_lname, bristo_contacts_ct_cred,
                bristo_contacts_ct_addr1, bristo_contacts_ct_addr2,
                bristo_contacts_ct_city, bristo_contacts_ct_state,
                bristo_contacts_ct_postal, bristo_contacts_ct_ph_office,
                bristo_contacts_ct_ph_cell, bristo_contacts_ct_home,
                bristo_contacts_ct_email1, bristo_contacts_ct_email2,
                bristo_contacts_ct_web, bristo_contacts_ct_web2,
                bristo_contacts_ct_notes, bristo_contacts_ct_picture)
                = (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,
                %s,%s,%s,%s) WHERE bristo_contacts_ct_co = %s 
                AND bristo_contacts_ct_fname = %s AND
                bristo_contacts_ct_lname =%s;""", (_company,_mrmrs,
                _fname,_middle,_lname,_cred, _addr, _suite,_city,_st,_postal,
                _oph,_cell,_hph,_oemail,_pemail,_oweb,_pweb,
                _notes,psycopg2.Binary(self._image_bin), _company,
                _fname,_lname ))
                
            self.conn.commit()
            self.contactsStatusBar.showMessage('Contact Updated.', 3000)
    
    
    def display_contact(self):
        '''
        display_contact simply displays a contact based on the contact
        index integer value in self_CONTACT.
        '''
        self.bristo_search.companyLineEdit.setText(
            self.fetch_results[self._CONTACT][self._COMPANY])
        self.bristo_search.mrmrsLineEdit.setText(
            self.fetch_results[self._CONTACT][self._MRMRS])
        self.bristo_search.firstNameLineEdit.setText(
            self.fetch_results[self._CONTACT][self._FNAME])
        self.bristo_search.middleNameLineEdit.setText(
            self.fetch_results[self._CONTACT][self._MIDDLE])
        self.bristo_search.lastNameLineEdit.setText(
            self.fetch_results[self._CONTACT][self._LNAME])
        self.bristo_search.credLineEdit.setText(
            self.fetch_results[self._CONTACT][self._CRED])
        self.bristo_search.addressLineEdit.setText(
            self.fetch_results[self._CONTACT][self._ADDR])
        self.bristo_search.suiteLineEdit.setText(
            self.fetch_results[self._CONTACT][self._SUITE])
        self.bristo_search.cityLineEdit.setText(
            self.fetch_results[self._CONTACT][self._CITY])
        self.bristo_search.stateLineEdit.setText(
            self.fetch_results[self._CONTACT][self._ST])
        self.bristo_search.postalLineEdit.setText(
            self.fetch_results[self._CONTACT][self._POSTAL])
        self.bristo_search.officePhoneLineEdit.setText(
            self.fetch_results[self._CONTACT][self._OPHONE])
        self.bristo_search.cellPhoneLineEdit.setText(
            self.fetch_results[self._CONTACT][self._CELL])
        self.bristo_search.homePhoneLineEdit.setText(
            self.fetch_results[self._CONTACT][self._HPHONE])
        self.bristo_search.officeEmailLineEdit.setText(
            self.fetch_results[self._CONTACT][self._OEMAIL])
        self.bristo_search.personalEmailLineEdit.setText(
            self.fetch_results[self._CONTACT][self._PEMAIL])
        self.bristo_search.officeWebLineEdit.setText(
            self.fetch_results[self._CONTACT][self._OWEB])
        self.bristo_search.personalWebLineEdit.setText(
            self.fetch_results[self._CONTACT][self._PWEB])
        self.bristo_search.notesTextEdit.setText(
            self.fetch_results[self._CONTACT][self._NOTES])
        self._image_bytea = self.fetch_results[self._CONTACT][self._PIC]
        self.display_pic(self._image_bytea)
        _msg = 'Contact '+str(self._CONTACT+1)+" of "+str(self._LASTCONTACT+1)+\
               " fetched."
        self.contactsStatusBar.showMessage(_msg, 3000)
    

    def update_pic(self):
        '''
        update_pic opens a picture provided by the PostgreSQL database user
        and displays it then returns self._image_bin to the caller dialog.
        '''
        fdlg = QFileDialog()                               
        fname = fdlg.getOpenFileName(self, 'Open file', 
                   "Image files (*.jpg *.gif *.png)")       # Get Filename
        self._image = QPixmap(fname)                        # Get Pixmap
        self._image_bin = open(fname, 'rb').read()          # Read > pointer
        if self.active_dlg == 'insert':
            self.bristo.picLabel.setPixmap(self._image)     # Display
        else:
            self.bristo_search.picLabel.setPixmap(self._image)  # Display

    
    def display_pic(self,  _buffer):
        '''
        display_pic accepts a buffer returned by a psycopg2 driver from a
        PostgreSQL database and displays a QPixmap to a widget ie QDialog.
        '''
        picture = bytes(_buffer)                            # Unpack to bytes
        p = QPixmap()                                       # Create QPixmap
        p.loadFromData(picture)                             # Load Picture
        self.bristo_search.picLabel.setPixmap(p)            # Display Picture
    
    def db_full_vacuum(self):
        '''
        db_full_vacuum does a complete vacuum of the database.
        '''
        if self.connected:
            self.cursor = self.conn.cursor()
            old_isolation_level = self.conn.isolation_level
            self.conn.set_isolation_level(0)
            self.query = "VACUUM FULL"
            self._doQuery(self.query)
            self.conn.set_isolation_level(old_isolation_level)
            _msg ='Vacumming Database bristocontacts complete.'
            self.contactsStatusBar.showMessage(_msg, 5000)
            self.cursor.close()
        else:
            _msg = 'Please connect to the database to vacuum.'
            self.contactsStatusBar.showMessage(_msg, 5000)
            
    def db_reindex(self):
        '''
        db_reindex reindexes the database bristo_contacts_ct.
        '''
        if self.connected:
            self.cursor = self.conn.cursor()
            old_isolation_level = self.conn.isolation_level
            self.conn.set_isolation_level(0)
            self.query = 'REINDEX DATABASE bristocontacts'
            self._doQuery(self.query)
            self.conn.set_isolation_level(old_isolation_level)
            _msg = 'Reindexing bristocontacts is complete.'
            self.contactsStatusBar.showMessage(_msg,  5000)
            self.cursor.close()
        else:
            _msg = 'Please connect to the database to reindex.'
            self.contactsStatusBar.showMessage(_msg, 5000)

    def _doQuery(self, query):
        '''
        _doQuery performs a query with a cursor and then commits the
        transaction.
        '''
        self.cursor.execute(query)
        self.conn.commit()
    
    def db_close(self):
        '''
        db_close closing the current cursor if any and database connection.  It
        then turns the status bar red.
        '''
        self.conn.close()
        self.connected = False
        self.contactsStatusBar.setStyleSheet("background-color: \
                                              rgb(230, 128, 128);")
        self.contactsStatusBar.removeWidget(self.conn_msg)
        self.conn_msg = QLabel(self._TODAY+' | Disconnected from host: '+ 
                                    self.login.hostLineEdit.text()+
                                  '/'+ self.login.databaseLineEdit.text()+'.')
        self.contactsStatusBar.addWidget(self.conn_msg)
        self.disconnected = True
    
    def close_contacts(self):
        '''
        close_contacts close closes the current database connection
        and closes bristoSOFT Contacts.
        '''
        if self.connected:
            self.conn.close()
            self.contactsStatusBar.setStyleSheet("background-color: \
                                              rgb(230, 128, 128);")
            self.contactsStatusBar.removeWidget(self.conn_msg)
            self.conn_msg = QLabel(self._TODAY + ' | Disconnected from host: '+ 
                                    self.login.hostLineEdit.text()+
                                  '/'+ self.login.databaseLineEdit.text()+'.')
            self.contactsStatusBar.addWidget(self.conn_msg)
                                              
        self.close()
        


def main():
    app = QApplication(sys.argv)
    contacts = bristosoftContacts()
    contacts.setWindowIcon(QIcon(":icons/family.ico"))
    contacts.show()
    app.exec_()

if __name__ == '__main__':
    main()
